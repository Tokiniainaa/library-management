openapi: 3.0.3
info:
  title: Library API
  version: 1.1.0
  description: STD22106
servers:
  - url: https://library.com

paths:
  /books:
    get:
      tags:
        - "Books"
      summary: Get all books
      description: The returned books are ordered by updated datetime.
      operationId: getBooks
      parameters:
        - in: query
          name: bookName
          description: Filter return books by given name
          required: false
          schema:
            type: string
        #TODO3: add parameter to filter books by intervals of dates of the releaseDate
        - in: query
          name: date_to_start
          description: the starting date
          required: false
          schema:
            type: string
            format: date
        - in: query
          name: date_to_end
          description: the ending date
          required: false
          schema:
            type: string
            format: date   
              

      responses:
        200:
          description: The list of filtered books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
    put:
      tags:
        - "Books"
      summary: Create or update a list of books
      operationId: crupdateBooks
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Book'
      responses:
        200:
          description: The list of created or updated books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
  /authors:
  #TODO2: complete GET (can be filtered by name) - PUT - DELETE
    get:
      tags:
        - "Author"
      summary: Get all Authors
      description: The returned Authors are ordered by name .
      operationId: getAuthors
      parameters:
        - in: query
          name: authorName
          description: Filter return authors by given name
          required: false
          schema:
            type: string
      responses:
        200:
          description: The list of filtered authors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/author'
    put:
      tags:
        - "Author"
      summary: Create or update a author
      operationId: crupdateAuthor
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/author'
      responses:
        200:
          description: The created or updated authors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/author'

    delete:
      tags:
        - "Author"
      summary: delete an author
      description: delete an author
      operationId: deletePet
      parameters:
         - in: query
           name: authorName
           description: 'delete the author by given the name '
           required: false
           schema:
            type: string
      responses:
        200:
           description: The deleted authors
           content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/author'

        
       

components:
  schemas:
    Book:
      type: object
      properties:
        author:   
          #TODO1: set it as a component with properties : id, name, sex (M or F)
          items:
            $ref: '#/components/schemas/author'
      allOf:
        - $ref: "#/components/schemas/CrupdateBook"

    author:
       type: object
       properties:
         id:
           type: integer
         name: 
           type: string
         sex:
           $ref: '#/components/schemas/Sex'
    Sex:
           type: string
           enum:
             - M
             - F 
    
    CrupdateBook:
         type: object
         properties:
            id:
             type: integer
            bookName:
             type: string
            pageNumbers:
             type: integer
            topic:
             type: string
             enum:
               - ROMANCE
               - COMEDY 
               - OTHER
            releaseDate:
              type: string
              format: date

