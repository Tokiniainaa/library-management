openapi: 3.0.3
info:
  title: Library API
  version: 1.2.0
  description: STD22106
servers:
  - url: https://library.com

paths:
  /books:
    get:
      tags:
        - "Books"
      summary: Get all books
      description: The returned books are ordered by updated datetime.
      operationId: getBooks
      parameters:
        - in: query
          name: bookName
          description: Filter return books by given name
          required: false
          schema:
            type: string
        #TODO3: add parameter to filter books by intervals of dates of the releaseDate
        - in: query
          name: date_to_start
          description: the starting date
          required: false
          schema:
            type: string
            format: date
        - in: query
          name: date_to_end
          description: the ending date
          required: false
          schema:
            type: string
            format: date  
        - $ref: "#/components/parameters/Page"
        - $ref: "#/components/parameters/pageSize"
        
    

              

      responses:
        200:
          description: The list of filtered books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
    put:
      tags:
        - "Books"
      summary: Create or update a list of books
      operationId: crupdateBooks
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Book'
      responses:
        200:
          description: The list of created or updated books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
  /books/import:
     post: 
      tags:
        - "Books"
      summary: return the list of the book imported
      operationId: return the list of the book imported
      requestBody:
       description: list of book
       content:
         application/json:
          schema:
           $ref: "#/components/schemas/ImportBook" 
         application/vnd.ms-excel:
            schema: 
             $ref: "#/components/schemas/ImportBookExcel" 
      responses:
        200:
         description: list of imported book
         content:
           application/json:
            schema: 
             type: array
             items:
              $ref: "#/components/schemas/Book"
           application/vnd.ms-excel:
            schema: 
             type: array
             items:
               $ref: "#/components/schemas/Book" 
  /authors/import:
     post: 
      tags:
        - "Author"
      summary: return the list of the author imported
      operationId: return the list of the author imported
      requestBody:
       description: list of author
       content:
         application/json:
          schema:
           $ref: "#/components/schemas/ImportAuthor" 
         application/vnd.ms-excel:
            schema: 
              $ref: "#/components/schemas/ImportAuthorExcel" 


      responses:
        200:
         description: list of imported author
         content:
           application/json:
            schema: 
             type: array
             items:
              $ref: "#/components/schemas/author" 
           application/vnd.ms-excel:
            schema: 
             type: array
             items:
               $ref: "#/components/schemas/author"        
         

  /authors:
  #TODO2: complete GET (can be filtered by name) - PUT - DELETE
    get:
      tags:
        - "Author"
      summary: Get all Authors
      description: The returned Authors are ordered by name .
      operationId: getAuthors
      parameters:
        - in: query
          name: authorName
          description: Filter return authors by given name
          required: false
          schema:
            type: string
        - $ref: "#/components/parameters/Page"
        - $ref: "#/components/parameters/pageSize"
            
        
            
      responses:
        200:
          description: The list of filtered authors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/author'
    put:
      tags:
        - "Author"
      summary: Create or update a author
      operationId: crupdateAuthor
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/author'
      responses:
        200:
          description: The created or updated authors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/author'
    delete:
     tags:
       - "Author"
     summary: Delete all Authors
     operationId: Delete all Authors
     responses:
       200:
        description: All Authors is deleted

  /authors/{authorId}:
    delete:
      tags:
        - "Author"
      summary: delete an author
      description: delete an author
      operationId: deletePet
      parameters:
         - in: query
           name: authorId
           description: 'delete the author by given the id'
           required: false
           schema:
            type: string
      responses:
        200:
           description: The deleted authors
           content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/author'
 
    
  /books/{bookId}/authors/{authorId}: 
    put:
     tags:
       - "Author"
     summary: Associate
     description: Associate author and books
     operationId: update author
     parameters:
        - in: query
          name: bookId
          description: update authors by given bookId
          required: true
          schema:
            type: integer

        - in: query
          name: authorId
          description: update authors by given authorId
          required: true
          schema:
            type: integer    

     responses:
      200:
       description: author updated
       content:
         application/json:
          schema:
           type: array
           items:
            $ref: '#/components/schemas/author'

  /books/authors:
    put:
     summary: update book and author
     description: update book and author
     operationId: UpdateBookAuthor

     requestBody:
      content:
        application/json:
         schema: 
          items:
           $ref: '#/components/schemas/UpdateBookAuthor'
     responses:
       200:
        description: updated succesfully
        content:
          application/json:
           schema:
             type: array
             items:
                $ref: "#/components/schemas/UpdateBookAuthor"
  /authors/page/{page}/pageSize/{pageSize} :
    get:
     tags:
      - "Author"
     summary: get author
     description: get author
     operationId: getAuthor
     parameters:
      - in: path
        name: page
        schema:
          type: integer
          default: 1
        required: true
      - in: path
        name: pageSize
        schema:
         type: integer
         default: 50
        required: true

     responses:
        200:
         description: The list of authors
         content:
           application/json:
            schema: 
             type: array
             items:
              $ref: '#/components/schemas/author'
          

components:
  schemas:
    Book:
      type: object
      properties:
        author:   
          #TODO1: set it as a component with properties : id, name, sex (M or F)
          items:
            $ref: '#/components/schemas/author'
      allOf:
        - $ref: "#/components/schemas/CrupdateBook"

    author:
       type: object
       properties:
         id:
           type: integer
         name: 
           type: string
         sex:
           $ref: '#/components/schemas/Sex'
    Sex:
           type: string
           enum:
             - M
             - F 
    
    CrupdateBook:
         type: object
         properties:
            id:
             type: integer
            bookName:
             type: string
            pageNumbers:
             type: integer
            topic:
             $ref: "#/components/schemas/Topic"
            releaseDate:
              type: string
              format: date
    Topic: 
             type: string
             enum:
               - ROMANCE
               - COMEDY 
               - OTHER
    UpdateBookAuthor:
            type: object
            properties:
              bookId:
               type: integer
              authorId:
               type: integer
    ApiResponses:
            type: object
            properties:
              status:
               type: object
               properties:
                code:
                 type: integer
                message:
                 type: string
              body:
                type: object
    succesfullyResponses:
      allOf:
      - $ref: "#/components/schemas/ApiResponses"
      example:
        status:
         code: 200
         message: "response succesfull"
        body: ''
    badRequest:
      allOf:
      - $ref: "#/components/schemas/ApiResponses"
      example:
        status:
         code: 400
         message: "bad request"
        body: ''
    Forbidden:
      allOf:
      - $ref: "#/components/schemas/ApiResponses"
      example:
        status:
         code: 403
         message: "Forbidden"
        body: ''
    internalServerError:
      allOf:
      - $ref: "#/components/schemas/ApiResponses"
      example:
        status:
         code: 500
         message: "internal server error"
        body: ''
  

    ImportBook:
      type: object
      properties:
        bookName:
          type: string
        author:
          $ref: "#/components/schemas/author"
        pageNumbers:
          $ref: "#/components/parameters/pageSize"
        topic:
          $ref: "#/components/schemas/Topic"
        releaseDate:
          type: string
          format: date
    ImportAuthor:
      type: object
      properties:
        author:
          $ref: "#/components/schemas/author"
    
    ImportBookExcel:
      type: object
      properties:
        bookName:
          type: string
        author:
          $ref: "#/components/schemas/author"
        pageNumbers:
          $ref: "#/components/parameters/pageSize"
        topic:
          $ref: "#/components/schemas/Topic"
        releaseDate:
          type: string
          format: date
    ImportAuthorExcel:
      type: object
      properties:
        author:
          $ref: "#/components/schemas/author"
    
    
  parameters:
    Page:
     in: query
     name: page
     schema:
      type: integer
      default: 1
     required: false
    pageSize:
      in: query
      name: pageSize
      schema:
       type: integer
       default: 50
      required: false
    
   

     

